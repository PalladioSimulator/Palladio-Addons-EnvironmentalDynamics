-- Deklaration
//metamodel SimpleUML { /* wie oben Listing 2.1 */ }
//metamodel SimpleRDBM { /* wie oben Listing 2.1 */ }
-- Benutzung
//modeltype UML uses SimpleUML;
//modeltype RDBM uses SimpleRDBM;

// Variante 2: extern definierten Metamodellen
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.2';
modeltype PCM_CORE_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.2';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.2';


// Variante 3: Metamodelle im Eclipse-Kontext
//modeltype PCM uses 'http:///palladiosimulator.org/model/pcm.ecore';


transformation  changeLinkPower(inout pcmSystem : PCM_SYS, in pcmResEnv : PCM_RES_ENV, in pcmAlloc : PCM_ALLOC) {

	// action parameters passed to qvto transformation to update PCM model
	configuration property link : String;			// link id
	configuration property referenceName : String;	// varible referenceName
	configuration property value : Integer;			// power value
//	property link : String = '_sWqfUMWTEem8XvI7PKw-OA';	// link id link15
//	property value : Integer = 15;						// power value

	main() {
		log('*** STARTED: Transformation rule [changeLinkPower] ...');
		adjustPowerSettings();
		log('*** DONE: Transformation rule [changeLinkPower]');	
	}
	
	helper adjustPowerSettings() {
		var rc : ResourceContainer = findResourceContainerForLink(link);
		assert fatal(rc != null) with log('No ResourceContainer found with link id: ' + link);
	
		var assemblyCtx : AssemblyContext = findAssemblyContextForLinkingResource(rc, referenceName);
		assert fatal(assemblyCtx != null) with log('No AssemblyContext found with for link/referenceName: ' + link + '/' + referenceName);
		
		var variableUsage : VariableUsage := assemblyCtx.configParameterUsages__AssemblyContext->any(namedReference__VariableUsage.referenceName = referenceName);
		assert fatal(variableUsage != null) with log('No VariableUsage found with reference name: ' + referenceName);
		
		var variableToAdjust : PCMRandomVariable := variableUsage.variableCharacterisation_VariableUsage->asSequence()->first().specification_VariableCharacterisation;
		assert fatal(variableToAdjust != null) with log('No PCMRandomVariable found for link/referenceName: ' + link + '/' + referenceName);
		
		log('[changeLinkPower: set link/referenceName=' + link + '/' + referenceName + ' to value:' + value.toString() + ']');
		variableToAdjust.specification := value.toString();
	}

	query findResourceContainerForLink(in link : String ) : ResourceContainer {
		var linkingResources = pcmResEnv.rootObjects()[ResourceEnvironment].allSubobjects()[LinkingResource];
	
		linkingResources->forEach(linkResource){
			if linkResource.id = link then {
				var resourceContainers : Set(ResourceContainer) := linkResource.connectedResourceContainers_LinkingResource;
				var sourceRC : ResourceContainer := resourceContainers->asList()->first();
				log('Found ResourceContainer[' + sourceRC.entityName +', ' + sourceRC.id +']');
				return sourceRC;
			}
			endif
		};
		return null;
	}
	
	query findAssemblyContextForLinkingResource(in rc : ResourceContainer, in referenceName : String) : AssemblyContext {
		var assemblyCtxs : Set(AssemblyContext) = findAssemblyContextsForResourceContainer(rc);
		
		assemblyCtxs->forEach(assemblyCtx){
			assemblyCtx.configParameterUsages__AssemblyContext->forEach(ref) {
				if ref.namedReference__VariableUsage.referenceName = referenceName then {
					return assemblyCtx;					
				}endif;			
			};
		};
		
		return null;
	}
	
	query findAssemblyContextsForResourceContainer(in rc : ResourceContainer) : Set(AssemblyContext) {
		var contexts : Set(AssemblyContext);
		var allocations : Set(Allocation) = pcmAlloc.rootObjects()[Allocation];
		
		allocations->forEach(allocation) {
			var ctxs = allocation.allSubobjectsOfKind(AllocationContext);
			ctxs->forEach(context) {
				log('Check context[' + context.entityName + ']');
				var rcContext = context.resourceContainer_AllocationContext;
				if (rcContext = rc) then {
					contexts += context.assemblyContext_AllocationContext;
				} endif;
			}
		};
		
		return contexts;
	}
}
