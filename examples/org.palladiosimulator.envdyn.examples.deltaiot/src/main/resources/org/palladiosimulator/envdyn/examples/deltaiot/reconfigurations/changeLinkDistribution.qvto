// declaration: externally defined metamodels
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.2';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.2';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.2';
modeltype PCM_SEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.2';

transformation changeLinkDistribution(inout pcmRepository : PCM_REP, in pcmSystem : PCM_SYS) {

	// action parameters passed to qvto transformation to update PCM model
	configuration property assemblyConnector : String;				// assemblyConnector id
	configuration property probabilisticBranchTransition : String;	// variable probabilisticBranchTransition; refers to appliedBranch in *.reconfiugurationParams
	configuration property value : Real;							// distribution value


	main() {
	
		log('*** STARTED: Transformation rule [changeLinkDistribution] ...');
		adjustDistributionFactor();
		log('*** DONE: Transformation rule [changeLinkDistribution]');
						 								  
	}
	
	/**
	 * Distribution factor adjustment.
	 */
	helper adjustDistributionFactor() {
		var assemblyCtx : AssemblyContext = findAssemblyContextForAssemblyConnector(assemblyConnector);
		assert fatal(assemblyCtx != null) with log('No AssemblyContext found with for assemblyConnector/probabilisticBranchTransition: ' + assemblyConnector + '/' + probabilisticBranchTransition);

		var branchToAdjust : ProbabilisticBranchTransition = findProbabilisticBranchTransitionForLinkingResource(assemblyCtx, probabilisticBranchTransition); 
		assert fatal(branchToAdjust != null) with log('No ProbabilisticBranchTransition found with for assemblyConnector/probabilisticBranchTransition: ' + assemblyConnector + '/' + probabilisticBranchTransition);

		// sanity checks: normalize value to be within [0.0, 1.0]
		log('changeLinkDistribution: sanity checking for distribution factor value=' + value.toString() + ' ...');
		var normalizedValue = value;
		if (normalizedValue >= 1.0) {
			normalizedValue := value.round();
			log('changeLinkDistribution: sanity check (value >= 1) -> rounded value from ' + value.toString() + ' to ' + normalizedValue.toString());
		};
		if (normalizedValue <= 0.0) {
			normalizedValue := 0.0;
			log('changeLinkDistribution: sanity check (value <= 0) -> rounded value from ' + value.toString() + ' to ' + normalizedValue.toString());
		};
		if ((1.0 - value).abs() < 0.0001) {
			normalizedValue := value.round();
			log('changeLinkDistribution: sanity check (value < 0.00001) -> rounded value from ' + value.toString() + ' to ' + normalizedValue.toString());
		};
		assert fatal(value > 0.0 or value < 1.0) with log('Distribution factor not within range [0.0,1.0]: value=' + normalizedValue.toString());
		
		log('[changeLinkDistribution: set branchProbability of ProbabilisticBranchTransition ' + branchToAdjust.entityName + ' to value:' + normalizedValue.toString() + ']');
		branchToAdjust.branchProbability := normalizedValue;
	}
	
	
	query findAssemblyContextForAssemblyConnector(in assemblyConnector : String) : AssemblyContext {
		log('[findAssemblyContextForAssemblyConnector: search assemblyConnector: ' + assemblyConnector + ']');
		var assemblyConnectors : Bag(AssemblyConnector) = pcmSystem.rootObjects()[System].allSubobjects()[AssemblyConnector];
		assemblyConnectors->forEach(connector) {
			log('[findAssemblyContextForAssemblyConnector: check assemblyConnector/assemblyConnector: ' + connector.id +'/'+ assemblyConnector + ']');
			if (connector.id = assemblyConnector) then {
				var assemblyCtx : AssemblyContext = connector.requiringAssemblyContext_AssemblyConnector;
				log('Found AssemblyContext[' + assemblyCtx.entityName +', ' + assemblyCtx.id +']');
				return assemblyCtx;
			}endif;
		};
		return null;
	}
	
	
	query findProbabilisticBranchTransitionForLinkingResource(in assemblyCtx : AssemblyContext, in probabilisticBranchTransition : String) : ProbabilisticBranchTransition {
		var basicComponent : BasicComponent := assemblyCtx.encapsulatedComponent__AssemblyContext.oclAsType(BasicComponent);
		var branchTransitions : Bag(ProbabilisticBranchTransition) := basicComponent.serviceEffectSpecifications__BasicComponent.allSubobjects()[ProbabilisticBranchTransition];
		branchTransitions->forEach(branchTransition) {
			if (branchTransition.entityName = probabilisticBranchTransition ) {
				var branchToAdjust : ProbabilisticBranchTransition := branchTransition;
				return branchToAdjust;
			} endif;			
		};
		return null;
	}
	
}